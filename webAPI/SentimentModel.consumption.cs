// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML.Data;
using Microsoft.Extensions.ML;
using Microsoft.Extensions.DependencyInjection;
using System.Net.Http;
using System.Threading.Tasks;
using System;
using System.Net.Http.Json;
using System.Text.Json;
using Microsoft.ML;
using System.IO;

namespace MBGeneratedCode

{
    public abstract partial class SentimentModel
    {
        /// <summary>
        /// model input class for SentimentModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Comment")]
            public string Comment { get; set; }

            [ColumnName(@"Sentiment")]
            public string Sentiment { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for SentimentModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("PredictedLabel")]
            public string Prediction { get; set; }

            public float[] Score { get; set; }
        }

        #endregion

        public static SentimentModel Create(string modelPath)
        {
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            var fullModelPath = Path.GetFullPath(modelPath);
            ITransformer mlModel = mlContext.Model.Load(fullModelPath, out var modelInputSchema);
            var predictionEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            return new SentimentModelPredictionEngine(predictionEngine);
        }

        public static SentimentModel Create(PredictionEngine<SentimentModel.ModelInput, SentimentModel.ModelOutput> predictionEngine)
        {
            return new SentimentModelPredictionEngine(predictionEngine);
        }

        public static SentimentModel Create(PredictionEnginePool<SentimentModel.ModelInput, SentimentModel.ModelOutput> predictionEnginePool)
        {
            return new SentimentModelPredictionEnginePool(predictionEnginePool);
        }


        public abstract ModelOutput Predict(ModelInput input);

        class SentimentModelPredictionEngine : SentimentModel
        {
            private readonly PredictionEngine<ModelInput, ModelOutput> _predictionEngine;
            public SentimentModelPredictionEngine(PredictionEngine<SentimentModel.ModelInput, SentimentModel.ModelOutput> predictionEngine)
            {
                this._predictionEngine = predictionEngine;
            }

            public override ModelOutput Predict(ModelInput input)
            {
                return this._predictionEngine.Predict(input);
            }
        }

        class SentimentModelPredictionEnginePool : SentimentModel
        {
            private readonly PredictionEnginePool<ModelInput, ModelOutput> _predictionEnginePool;
            public SentimentModelPredictionEnginePool(PredictionEnginePool<SentimentModel.ModelInput, SentimentModel.ModelOutput> predictionEnginePool)
            {
                this._predictionEnginePool = predictionEnginePool;
            }

            public override ModelOutput Predict(ModelInput input)
            {
                return this._predictionEnginePool.Predict(input);
            }
        }
    }
}
